{
   type CoffeeCup = {
      shots: number;
      hasMilk?: boolean;
      hasSugar?: boolean; //optional
   }
   
   interface CoffeeMaker {
      makeCoffee(shots:number):CoffeeCup;
   }
   //Ïù∏ÌÑ∞ÌéòÏù¥Ïä§Íµ¨ÌòÑ
   class CoffeeMachine implements CoffeeMaker {
      private static BEANS_GRAMM_PER_SHOT:number=7;
      private coffeeBeans: number = 0;

      public constructor(coffeeBeans:number) {
         this.coffeeBeans=coffeeBeans;
      }

      static makeMachine(coffeeBeans:number):CoffeeMachine{
         return new CoffeeMachine(coffeeBeans);
      }

      fillCoffeeBeans(beans: number) {
         if(beans <0 ){
            throw Error(`value for beans can not be lower than 0`)
         }
         this.coffeeBeans += beans;
      }

      public grindBeans(shots: number){
         console.log(`grinding beans for ${shots}`)
         if(this.coffeeBeans < shots*CoffeeMachine.BEANS_GRAMM_PER_SHOT){
            throw Error(`Not enough coffee beans ‚òïÔ∏è`)
         }
         this.coffeeBeans -= shots*CoffeeMachine.BEANS_GRAMM_PER_SHOT;
      }

      public preheat():void{
         console.log('heating up... üî•')
      }

      public extract(shots:number):CoffeeCup{
         console.log(`extracting...${shots} shots`);
         return {
            shots,
            hasMilk: false
         }
      }
      
      clean(){
         console.log("cleaning the machine... üßº")
      }

      makeCoffee(shots:number):CoffeeCup{
         this.grindBeans(shots);
         this.preheat();
         return this.extract(shots);
      }
   }

   // ‚ú® ÌÅ¥ÎûòÏä§Í∞Ñ ÏÜåÌÜµÏù¥ ÌïÑÏöîÌï† Îïê Ïù∏ÌÑ∞ÌéòÏù¥Ïä§Î•º ÌÜµÌïòÏûê (decoupling)
   interface MilkFrother {
      makeMilk(cup:CoffeeCup): CoffeeCup;
   }

   interface SugarProvider {
      addSugar(cup:CoffeeCup):CoffeeCup;
   }

   // ‚ú®Ïã∏Íµ¨Î†§ Ïö∞Ïú† Í±∞ÌíàÍ∏∞!
   class CheapMilkSteamer implements MilkFrother{
      private steamMilk():void {
         console.log(`Steaming some milk...ü•õ`);
      }
      makeMilk(cup:CoffeeCup):CoffeeCup{
         this.steamMilk();
         return {
            ...cup,
            hasMilk: true,
         }
      }
   }

   //‚ú®Í≥†Ïò§Í∏â Ïö∞Ïú† Í±∞ÌíàÍ∏∞! (new)
   class FancyMilkSteamer implements MilkFrother{
      private steamMilk(): void{
         console.log('steaming some FANCY milk... ‚ú®ü•õ');
      }
      makeMilk(cup:CoffeeCup):CoffeeCup{
         this.steamMilk();
         return {
            ...cup,
            hasMilk:true,
         }
      }
   }

   //‚ú®üßäÍ≥†Ïò§Í∏â Ïö∞Ïú† Í±∞ÌíàÍ∏∞2 (new)
   class ColdMilkSteamer implements MilkFrother{
      private steamMilk(): void{
         console.log('steaming some FANCY COLD milk... ‚ú®üßäü•õ');
      }
      makeMilk(cup:CoffeeCup):CoffeeCup{
         this.steamMilk();
         return {
            ...cup,
            hasMilk:true,
         }
      }
   }

   //ü§Æ
   class NoMilk implements MilkFrother{
      makeMilk(cup:CoffeeCup):CoffeeCup{
         return cup;
      }
   }

   //ÏÑ§ÌÉï Ï†úÏ°∞Í∏∞(class CandySugarMixer {}) => +Ïù∏ÌÑ∞ÌéòÏù¥Ïä§
   class CandySugarMixer implements SugarProvider{
      private getSugar(){
         console.log("getting some sugar from cheap candy...üç≠");
         return true;
      }
      addSugar(cup:CoffeeCup):CoffeeCup{
         const sugar = this.getSugar()
         return {
            ...cup,
            hasSugar:sugar,
         }
      }
   }

   //‚ú®Fancy ÏÑ§ÌÉï Ï†úÏ°∞Í∏∞(class CandySugarMixer {}) => +Ïù∏ÌÑ∞ÌéòÏù¥Ïä§
   class SugarMixer implements SugarProvider{
      private getSugar(){
         console.log("getting some FANCY sugar from jar...üçØ");
         return true;
      }
      addSugar(cup:CoffeeCup):CoffeeCup{
         const sugar = this.getSugar()
         return {
            ...cup,
            hasSugar:sugar,
         }
      }
   }

   //üßòüèª‚Äç‚ôÄÔ∏è
   class NoSugar implements SugarProvider{
      addSugar(cup:CoffeeCup):CoffeeCup{
         return cup;
      }
   }

   //ÏÉÅÏÜç ü•õ+‚òïÔ∏è=üíú
   class CoffeelatteMachine extends CoffeeMachine {
      //Îî∞Î°ú ÏÉùÏÑ±ÏûêÎ•º ÎßåÎì§Í≥† Ïã∂Îã§Î©¥, Î∂ÄÎ™®Ïùò ÏÉùÏÑ±ÏûêÎèÑ Ìò∏Ï∂úÌï¥Ï§òÏïº.
      constructor(
         beans: number, 
         public readonly serialNumber:string, 
         //‚ú® ÌÅ¥ÎûòÏä§(CheapMilkSteamer)->Ïù∏ÌÑ∞ÌéòÏù¥Ïä§(MilkFrother)
         private milkFrother:MilkFrother
      ) {
         super(beans);
         this.serialNumber = serialNumber;
      }

      makeCoffee(shots:number):CoffeeCup{

         const coffee = super.makeCoffee(shots);
         return this.milkFrother.makeMilk(coffee);
      }
   }

   class SweetCoffeeMaker extends CoffeeMachine {
      constructor(
         beans: number, 
         // ‚ú® (CandySugarMixer(C)->SugarProvider(I))
         private sugar:SugarProvider,
      ) {
         super(beans);
      }

      makeCoffee(shots:number):CoffeeCup{
         const coffee = super.makeCoffee(shots);
         return this.sugar.addSugar(coffee);
      }
   }
   
   // ‚ú®
   class SweetCaffeeLatteMachine extends CoffeeMachine {
      constructor(
         private beans:number,
         //‚ú® 
         private sugar:SugarProvider,
         private milk:MilkFrother,
      ) {
         super(beans);
      }

      makeCoffee(shots:number):CoffeeCup{
         const coffee = super.makeCoffee(shots);
         const milkCoffee = this.milk.makeMilk(coffee);
         return this.sugar.addSugar(milkCoffee);
      }
   }

   // ‚ú® 
   const cheapMilkMaker = new CheapMilkSteamer();
   const fancyMilkMaker = new FancyMilkSteamer();
   const coldMilkMaker = new ColdMilkSteamer();

   const candySugar = new CandySugarMixer();
   const sugar = new SugarMixer();


   const coffeeMachine = new CoffeeMachine(16);
   const cheapLatteeMachin = new CoffeelatteMachine(16, '0415', cheapMilkMaker);
   const sweetMachine = new SweetCoffeeMaker(16, candySugar);
   const sweetLatteMachine = new SweetCaffeeLatteMachine(16, candySugar, cheapMilkMaker);
   

}